# -*- coding: utf-8 -*-
"""theft_resnet18model_ FLASK.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1P8GYsx29X8NvaPjAluEt8qN63sHGmlo_
"""

from flask import Flask, request, jsonify
from werkzeug.utils import secure_filename
import torch
import torchvision.transforms as transforms
import torchvision.models as models
from PIL import Image
import os
import cv2

app = Flask(__name__)

UPLOAD_FOLDER = 'uploads'
os.makedirs(UPLOAD_FOLDER, exist_ok=True)
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

device = torch.device('cpu')

# Load model
model = models.resnet18()
model.fc = torch.nn.Linear(model.fc.in_features, 2)
model.load_state_dict(torch.load("model/resnet_model.pth", map_location=device))
model.eval()

# Transforms
transform = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.ToTensor(),
])

def extract_frames(video_path, num_frames=16):
    cap = cv2.VideoCapture(video_path)
    total_frames = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))
    step = max(total_frames // num_frames, 1)
    frames = []
    for i in range(num_frames):
        cap.set(cv2.CAP_PROP_POS_FRAMES, i * step)
        ret, frame = cap.read()
        if not ret:
            break
        frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        frame = Image.fromarray(frame)
        frame = transform(frame)
        frames.append(frame)
    cap.release()
    if len(frames) == 0:
        return None
    return torch.stack(frames)

@app.route('/')
def home():
    return "TheftVision API is live ðŸ§ ðŸ“¹"

@app.route('/predict', methods=['POST'])
def predict():
    if 'video' not in request.files:
        return jsonify({'error': 'No file uploaded'})

    file = request.files['video']
    filename = secure_filename(file.filename)
    filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)
    file.save(filepath)

    frames = extract_frames(filepath)
    if frames is None:
        return jsonify({'error': 'No valid frames found in video'})

    preds = []
    with torch.no_grad():
        for frame in frames:
            frame = frame.unsqueeze(0).to(device)
            output = model(frame)
            pred = torch.softmax(output, dim=1)
            preds.append(pred.cpu())

    avg_pred = torch.mean(torch.stack(preds), dim=0)
    label = torch.argmax(avg_pred).item()
    confidence = torch.max(avg_pred).item()

    class_names = ['normal', 'theft']
    prediction = class_names[label]

    return jsonify({'prediction': prediction, 'confidence': f"{confidence:.4f}"})

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=7860)